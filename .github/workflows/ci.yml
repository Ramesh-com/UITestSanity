name: Regression Test Status

on:
  schedule:
    - cron: "0 */3 * * *" 
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install

      - name: Install Playwright Browsers
        run: npx playwright install
        
      - name: Create credentials.json
        run: |
          cat <<EOF > credentials.json
          {
              "web": {
                  "client_id": "${{secrets.CLIENT_ID}}",
                  "project_id": "${{secrets.PROJECT_ID}}",
                  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                  "token_uri": "https://oauth2.googleapis.com/token",
                  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                  "client_secret": "${{secrets.CLIENT_SECRET}}",
                  "redirect_uris": ["http://localhost/redirect"],
                  "javascript_origins": ["http://localhost"]
              }
          }
          EOF
        shell: bash

      - name: Create token.json
        run: |
          cat <<EOF > token.json
          {
              "type": "authorized_user",
              "client_id": "${{secrets.CLIENT_ID}}",
              "client_secret": "${{secrets.CLIENT_SECRET}}",
              "refresh_token": "${{secrets.REFRESH_TOKEN}}"
          }
          EOF
        shell: bash
        
      - name: Secure OAuth Credentials
        run: chmod 600 credentials.json token.json
        
      - name: Run Playwright Tests
        env:
          USER_EMAIL: ${{vars.USER_EMAIL}}
          HEADLESS: 'true'
        run: npx playwright test --project chromium

      - name: Upload Playwright Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: test-results/

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

      - name: Generate Playwright Report URL
        if: always()
        run: echo "PLAYWRIGHT_REPORT_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV
  
      - name: Notify Slack
        if: always() # Ensures notification is sent regardless of success or failure
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PLAYWRIGHT_REPORT_URL: ${{ env.PLAYWRIGHT_REPORT_URL }}
          TEST_ENVIRONMENT_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" 
        run: |
          STATUS="Success"
          COLOR="good"
          if [[ ${{ job.status }} == 'failure' ]]; then
            STATUS="Failure"
            COLOR="danger"
          fi
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"CI/CD Pipeline ${STATUS}\",
            \"attachments\": [
              {
                \"title\": \"Playwright Test Report\",
                \"title_link\": \"${PLAYWRIGHT_REPORT_URL}\",
                \"text\": \"Job Status: ${STATUS}\\nBranch: ${{ github.ref_name }}\\nCommit: ${{ github.sha }}\\nTriggered By: ${{ github.actor }}\\nTest Environment: ${TEST_ENVIRONMENT_URL}\",
                \"color\": \"${COLOR}\"
               }
            ]
          }" $SLACK_WEBHOOK_URL
