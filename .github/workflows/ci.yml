name: Regression Test Status

on:
  schedule:
    - cron: "*/30 * * * *"
  push:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which environment to run the tests on (prod, staging, local)'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - staging
          - local

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install

      - name: Install Playwright Browsers
        run: npx playwright install chromium

      - name: Create credentials.json
        run: |
          cat <<EOF > credentials.json
          {
              "web": {
                  "client_id": "${{secrets.CLIENT_ID}}",
                  "project_id": "${{secrets.PROJECT_ID}}",
                  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                  "token_uri": "https://oauth2.googleapis.com/token",
                  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                  "client_secret": "${{secrets.CLIENT_SECRET}}",
                  "redirect_uris": ["http://localhost/redirect"],
                  "javascript_origins": ["http://localhost"]
              }
          }
          EOF
        shell: bash

      - name: Create token.json
        run: |
          cat <<EOF > token.json
          {
              "type": "authorized_user",
              "client_id": "${{secrets.CLIENT_ID}}",
              "client_secret": "${{secrets.CLIENT_SECRET}}",
              "refresh_token": "${{secrets.REFRESH_TOKEN}}"
          }
          EOF
        shell: bash

      - name: Secure OAuth Credentials
        run: chmod 600 credentials.json token.json

      - name: Set Environment Based on User Input (Manual Trigger)
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "USER_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "USER_ENV=prod" >> $GITHUB_ENV
          fi

      - name: Run Playwright Tests
        env:
          USER_EMAIL: ${{ vars.USER_EMAIL }}
          HEADLESS: 'true'
          ENVIRONMENT: ${{ env.USER_ENV }}  
        run: |
          echo "Running Playwright tests on environment: $ENVIRONMENT"
          npm run test:$ENVIRONMENT

      - name: Upload Playwright Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: test-results/

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

      - name: Upload coverage folder to R2
        if: ${{ failure() || success() }}
        uses: himanshu-dixit/r2-upload-action-parallel@v1.3
        with:
          r2-account-id: 4d4f16c61d89ec64e760039c4ec50717
          r2-access-key-id: 0d667496881e1d6a0326454c7076cdab
          r2-secret-access-key: 29bb51006a9ab7419d90797b7d551a0145f0e2d632dbc4c71b3210b31b59d959
          r2-bucket: github-action
          source-dir: playwright-report
          destination-dir: coverage-${{ github.run_id }}/coverage

      - name: Print unique URL
        if: ${{ failure() || success() }}
        run: |
          echo "PLAYWRIGHT_REPORT_URL: 'https://pub-92e668239ab84bfd80ee07d61e9d2f40.r2.dev/coverage-${{ github.run_id }}/coverage/index.html'"

      - name: Print HTML report folder unique URL
        if: ${{ failure() || success() }}
        run: |
          echo "PLAYWRIGHT_REPORT_URL=https://pub-92e668239ab84bfd80ee07d61e9d2f40.r2.dev/coverage-${{ github.run_id }}/coverage/index.html" >> $GITHUB_ENV

      - name: Find Comment
        if: ${{ failure() || success() }}
        uses: peter-evans/find-comment@v3
        id: fc
        continue-on-error: true
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: This comment was generated by github-actions[bot]! for hermes unit tests

      - name: Set current time
        id: current_time
        run: echo "CURRENT_TIME=$(date +"%d-%b-%y %H:%M:%S")" >> $GITHUB_ENV

      - name: Set Triggered By
        id: triggered_by
        run: |
          if [[ "${{ env.cron_run }}" == "true" ]]; then
            echo "TRIGGERED_BY=cron" >> $GITHUB_ENV
          else
            echo "TRIGGERED_BY=${{ github.actor }}" >> $GITHUB_ENV
          fi

      - name: Notify Slack
        if: always()
        env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
            PLAYWRIGHT_REPORT_URL: ${{ env.PLAYWRIGHT_REPORT_URL }}
            CURRENT_TIME: ${{ env.CURRENT_TIME }}
            COMMIT_HASH: ${{ github.sha }}
            BRANCH: ${{ github.ref_name }}
            TRIGGERED_BY: ${{ env.TRIGGERED_BY }}
        run: |
            STATUS="Success"
            COLOR="good"
            if [[ "${{ job.status }}" == "failure" ]]; then
              STATUS="Failure"
              COLOR="danger"
            fi
            if [[ "${{ github.event_name }}" == "schedule" ]]; then
              echo "cron_run=true" >> $GITHUB_ENV
            else
              echo "cron_run=false" >> $GITHUB_ENV
            fi
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "manual_test=true" >> $GITHUB_ENV
            else
              echo "manual_test=false" >> $GITHUB_ENV
            fi
            TEST_TYPE=""
            if [[ "${{ env.cron_run }}" == "true" ]]; then
              TEST_TYPE="Ran Automated Cron monitoring on Prod at ${CURRENT_TIME}"
            elif [[ "${{ env.manual_test }}" == "true" ]]; then
              TEST_TYPE="Ran Manual Test on ${ENVIRONMENT} at ${CURRENT_TIME}"
            else
              TEST_TYPE="Triggered by ${TRIGGERED_BY} on ${ENVIRONMENT}"
            fi
            SLACK_MESSAGE=$(jq -n \
              --arg test_type "$TEST_TYPE" \
              --arg job_status "$STATUS" \
              --arg branch "$BRANCH" \
              --arg commit_hash "$COMMIT_HASH" \
              --arg triggered_by "$TRIGGERED_BY" \
              --arg current_time "$CURRENT_TIME" \
              --arg playwright_report_url "<$PLAYWRIGHT_REPORT_URL>" \
              --arg color "$COLOR" \
            '{
                text: "*Regression Testing: \($job_status)*",
                attachments: [
                  {
                    text: "*Test Type*: \($test_type)\n*Branch*: \($branch)\n*Commit Hash*: \($commit_hash)\n*Triggered By*: \($triggered_by)\n*Test Run Time*: \($current_time)\n*Playwright Test Report URL*: \($playwright_report_url)",
                    color: "\($color)"
                  }
                ]
            }')
            curl -X POST -H 'Content-type: application/json' --data "${SLACK_MESSAGE}" $SLACK_WEBHOOK_URL